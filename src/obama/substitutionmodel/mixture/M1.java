package obama.substitutionmodel.mixture;

import beast.base.evolution.datatype.Aminoacid;
import beast.base.evolution.datatype.DataType;
import beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel;

public class M1 extends EmpiricalSubstitutionModel {

	@Override
	public double[][] getEmpiricalRates() {
        double[][] rates = new double[][] {
        	{0,	0.295719,	0.067388,	0.253712,	1.029289,	0.107964,	0.514644,	10.868848,	0.380498,	0.084223,	0.086976,	0.188789,	0.286389,	0.155567,	1.671061,	2.132922,	0.529591,	0.115551,	0.102453,	0.916683},
        	{0.295719,	0,	0.448317,	0.457483,	0.576016,	1.741924,	0.736017,	0.704334,	5.658311,	0.123387,	0.221777,	93.433377,	0.382175,	0.235965,	6.535048,	0.525521,	0.303537,	0.641259,	0.289466,	0.102065},
        	{0.067388,	0.448317,	0,	2.358429,	0.251987,	0.216561,	0.503084,	0.435271,	4.873453,	0.090748,	0.03331,	0.746537,	0.128905,	0.127321,	0.904011,	0.939733,	0.43545,	0.046646,	0.262076,	0.043986},
        	{0.253712,	0.457483,	2.358429,	0,	0.189008,	0.59945,	109.901504,	1.070052,	5.229858,	0.052764,	0.021407,	0.621146,	0.081091,	0.205164,	5.164456,	0.74733,	0.308078,	0.260889,	0.185083,	0.080708},
        	{1.029289,	0.576016,	0.251987,	0.189008,	0,	0.029955,	0.084794,	1.862626,	0.553477,	0.151733,	0.23032,	0.096955,	0.352526,	0.590018,	0.386853,	1.559564,	0.606648,	0.587531,	0.592318,	0.88523},
        	{0.107964,	1.741924,	0.216561,	0.59945,	0.029955,	0,	4.117654,	0.24626,	6.508329,	0.054187,	0.195703,	1.669092,	0.810168,	0.066081,	2.437439,	0.165666,	0.106333,	0.093417,	0.035149,	0.072549},
        	{0.514644,	0.736017,	0.503084,	109.901504,	0.084794,	4.117654,	0,	1.202023,	1.634845,	0.060194,	0.069359,	2.448827,	0.232297,	0.064822,	3.537387,	0.435384,	0.290413,	0.280695,	0.105999,	0.206603},
        	{10.868848,	0.704334,	0.435271,	1.070052,	1.862626,	0.24626,	1.202023,	0,	0.404968,	0.048984,	0.069963,	0.256662,	0.228519,	0.241077,	4.320442,	3.656545,	0.290216,	0.307466,	0.096556,	0.306067},
        	{0.380498,	5.658311,	4.873453,	5.229858,	0.553477,	6.508329,	1.634845,	0.404968,	0,	0.204296,	0.504221,	1.991533,	0.655465,	6.799829,	11.291065,	0.961142,	0.448965,	6.227274,	20.304886,	0.205944},
        	{0.084223,	0.123387,	0.090748,	0.052764,	0.151733,	0.054187,	0.060194,	0.048984,	0.204296,	0,	1.495537,	0.09194,	1.99432,	0.75494,	0.170343,	0.050315,	0.372166,	0.206332,	0.09705,	5.381403},
        	{0.086976,	0.221777,	0.03331,	0.021407,	0.23032,	0.195703,	0.069359,	0.069963,	0.504221,	1.495537,	0,	0.122332,	3.256485,	2.261319,	0.848067,	0.064441,	0.102493,	0.459041,	0.133091,	0.561215},
        	{0.188789,	93.433377,	0.746537,	0.621146,	0.096955,	1.669092,	2.448827,	0.256662,	1.991533,	0.09194,	0.122332,	0,	0.45743,	0.163849,	5.260446,	0.360946,	0.389413,	0.033291,	0.115301,	0.112593},
        	{0.286389,	0.382175,	0.128905,	0.081091,	0.352526,	0.810168,	0.232297,	0.228519,	0.655465,	1.99432,	3.256485,	0.45743,	0,	1.559944,	0.426508,	0.132547,	0.498634,	0.559069,	0.264728,	0.693307},
        	{0.155567,	0.235965,	0.127321,	0.205164,	0.590018,	0.066081,	0.064822,	0.241077,	6.799829,	0.75494,	2.261319,	0.163849,	1.559944,	0,	0.438856,	0.306683,	0.109129,	18.392863,	66.647302,	0.400021},
        	{1.671061,	6.535048,	0.904011,	5.164456,	0.386853,	2.437439,	3.537387,	4.320442,	11.291065,	0.170343,	0.848067,	5.260446,	0.426508,	0.438856,	0,	4.586081,	2.099355,	0.411347,	0.47635,	0.584622},
        	{2.132922,	0.525521,	0.939733,	0.74733,	1.559564,	0.165666,	0.435384,	3.656545,	0.961142,	0.050315,	0.064441,	0.360946,	0.132547,	0.306683,	4.586081,	0,	3.634276,	0.101797,	0.148995,	0.089177},
        	{0.529591,	0.303537,	0.43545,	0.308078,	0.606648,	0.106333,	0.290413,	0.290216,	0.448965,	0.372166,	0.102493,	0.389413,	0.498634,	0.109129,	2.099355,	3.634276,	0,	0.03471,	0.063603,	0.755865},
        	{0.115551,	0.641259,	0.046646,	0.260889,	0.587531,	0.093417,	0.280695,	0.307466,	6.227274,	0.206332,	0.459041,	0.033291,	0.559069,	18.392863,	0.411347,	0.101797,	0.03471,	0,	20.561407,	0.13379},
        	{0.102453,	0.289466,	0.262076,	0.185083,	0.592318,	0.035149,	0.105999,	0.096556,	20.304886,	0.09705,	0.133091,	0.115301,	0.264728,	66.647302,	0.47635,	0.148995,	0.063603,	20.561407,	0,	0.154902},
        	{0.916683,	0.102065,	0.043986,	0.080708,	0.88523,	0.072549,	0.206603,	0.306067,	0.205944,	5.381403,	0.561215,	0.112593,	0.693307,	0.400021,	0.584622,	0.089177,	0.755865,	0.13379,	0.154902,	0}
        };
		return rates;
	}

	@Override
	public double[] getEmpiricalFrequencies() {
        double[] f = new double[] {0.147383, 0.017579, 0.058208, 0.017707, 0.026331, 0.041582, 0.017494, 0.027859, 0.011849, 0.076971, 0.147823, 0.019535, 0.037132, 0.029940, 0.008059, 0.088179, 0.089653, 0.006477, 0.032308, 0.097931};
        return f;
	}

    @Override
    public int[] getEncodingOrder() {
        Aminoacid dataType = new Aminoacid();
        String codeMap = dataType.getCodeMap();
        int[] codeMapNrs = new int[dataType.getStateCount()];
        //String encoding = "ACDEFGHIKLMNPQRSTVWY";
        String encoding = "ARNDCQEGHILKMFPSTWYV";
        for (int i = 0; i < dataType.getStateCount(); i++) {
            codeMapNrs[i] = encoding.indexOf(codeMap.charAt(i));
        }
        return codeMapNrs;
    }

    @Override
    public boolean canHandleDataType(DataType dataType) {
        return dataType instanceof Aminoacid;
    }
}
