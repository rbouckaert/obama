package obama.substitutionmodel;

import beast.base.core.Description;
import beast.base.evolution.datatype.Aminoacid;
import beast.base.evolution.datatype.DataType;
import beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel;
/** model data from codonPHYML, which is based on PHYML **/

@Description("Asymmetric substitution model for amino acids")
public class OBAMA_AsymPfam extends EmpiricalSubstitutionModel {
    @Override
    public double[][] getEmpiricalRates() {
        double[][] rate = new double[20][20];

    
     // NQ pfam matrix from IQ tree
     // https://github.com/iqtree/iqtree2/blob/master/model/modelprotein.cpp
        
        double[][] rates = {
        			{-1.069486,0.025296,0.008938,0.021702,0.024839,0.032825,0.057358,0.153331,0.008822,0.011772,0.036913,0.022558,0.021756,0.009841,0.044982,0.293716,0.137408,0.002333,0.007072,0.148024},
        			{0.049545,-0.792552,0.023926,0.007193,0.011113,0.115653,0.023148,0.024400,0.063797,0.008438,0.037014,0.286621,0.011105,0.002563,0.013835,0.047041,0.033298,0.007866,0.009876,0.016122},
        			{0.028963,0.038588,-1.156759,0.239745,0.006533,0.074468,0.045019,0.071780,0.092101,0.012715,0.007891,0.140837,0.007312,0.004546,0.007416,0.251906,0.098966,0.000576,0.018855,0.008540},
        			{0.044710,0.009358,0.191135,-0.837273,0.001005,0.027123,0.326706,0.052222,0.021840,0.000896,0.002286,0.020318,0.000989,0.001080,0.022948,0.077216,0.027947,0.000420,0.004721,0.004353},
        			{0.232486,0.025881,0.026613,0.004676,-1.111988,0.004423,0.000546,0.054099,0.018577,0.035820,0.070488,0.001309,0.022833,0.056320,0.004951,0.269618,0.088302,0.012551,0.055425,0.127071},
        			{0.105642,0.159619,0.063599,0.031175,0.002059,-1.269190,0.287997,0.016920,0.101499,0.007944,0.074342,0.184128,0.031984,0.001766,0.027689,0.073855,0.064808,0.002524,0.008306,0.023335},
        			{0.118220,0.021300,0.021301,0.270615,0.000059,0.155617,-0.851341,0.021725,0.007838,0.003626,0.007130,0.102520,0.003952,0.000582,0.016134,0.038580,0.037116,0.000479,0.002812,0.021735},
        			{0.127508,0.028838,0.072902,0.071880,0.006487,0.018332,0.037516,-0.558024,0.012548,0.001225,0.005257,0.028883,0.003396,0.004095,0.016073,0.099294,0.012391,0.002352,0.002807,0.006240},
        			{0.039332,0.143719,0.188167,0.047205,0.015673,0.204985,0.035568,0.017984,-1.186781,0.008240,0.048364,0.042932,0.010573,0.039262,0.025292,0.068742,0.032930,0.009791,0.191292,0.016729},
        			{0.005603,0.002475,0.005410,0.000261,0.004834,0.001036,0.000678,0.000877,0.001160,-1.476008,0.436284,0.005215,0.096978,0.059498,0.002106,0.003338,0.041873,0.001628,0.012843,0.793911},
        			{0.037235,0.013407,0.002342,0.000786,0.009588,0.017910,0.003274,0.005132,0.007518,0.237423,-0.783960,0.005256,0.140795,0.109896,0.011801,0.009778,0.015587,0.009406,0.012618,0.134209},
        			{0.048771,0.307891,0.082824,0.014790,0.000546,0.131025,0.102560,0.013086,0.016882,0.013869,0.015160,-0.913336,0.016086,0.000983,0.012811,0.052139,0.062271,0.000324,0.004069,0.017249},
        			{0.107191,0.039819,0.021210,0.002928,0.015205,0.080762,0.021256,0.013208,0.011163,0.281442,0.627472,0.053575,-1.712145,0.071490,0.006398,0.037128,0.132351,0.012371,0.028934,0.148243},
        			{0.026441,0.002412,0.003831,0.001150,0.018883,0.001947,0.001353,0.008862,0.012430,0.070699,0.252441,0.001389,0.044106,-0.808553,0.005741,0.021129,0.011973,0.032868,0.235871,0.055028},
        			{0.125761,0.024990,0.009735,0.028954,0.001238,0.032387,0.043969,0.016844,0.013177,0.006316,0.027607,0.032264,0.002930,0.003864,-0.523191,0.090102,0.035664,0.001447,0.003449,0.022493},
        			{0.279843,0.043941,0.149098,0.077126,0.025942,0.052127,0.044293,0.123647,0.023280,0.004996,0.021951,0.044453,0.007648,0.014468,0.079233,-1.320245,0.303425,0.003200,0.013761,0.007812},
        			{0.152268,0.043048,0.088614,0.028807,0.012648,0.046415,0.057316,0.013361,0.015207,0.071103,0.031373,0.075085,0.040898,0.006905,0.025966,0.392905,-1.251096,0.001680,0.010344,0.137154},
        			{0.019550,0.027421,0.002448,0.002233,0.010755,0.008078,0.004350,0.015920,0.011099,0.009252,0.057245,0.004386,0.013427,0.088395,0.008117,0.015532,0.007637,-0.404090,0.084264,0.013981},
        			{0.016996,0.013447,0.023276,0.007098,0.020894,0.010515,0.007687,0.003692,0.113502,0.013404,0.030010,0.008829,0.009942,0.333270,0.003999,0.022690,0.012800,0.038235,-0.710194,0.019909},
        			{0.269526,0.009273,0.004876,0.002328,0.029277,0.009091,0.017800,0.010870,0.004927,0.613175,0.193074,0.010642,0.050350,0.029561,0.017336,0.009078,0.139110,0.002774,0.004810,-1.427878}
		};
    
       
       return rates;
    }

    @Override
    public double[] getEmpiricalFrequencies() {
        double[] f = {	0.085828,0.057765,0.042208,0.056571,
        				0.010431,0.039497,0.067733,0.065784,
        				0.021005,0.054760,0.099342,0.059301,
        				0.019806,0.042634,0.039871,0.069819,
        				0.055733,0.014445,0.033186,0.064280};
    
        return f;
    }

    @Override
    public int[] getEncodingOrder() {
        Aminoacid dataType = new Aminoacid();
        String codeMap = dataType.getCodeMap();
        int[] codeMapNrs = new int[dataType.getStateCount()];
        String encoding = "ARNDCQEGHILKMFPSTWYV";
        for (int i = 0; i < dataType.getStateCount(); i++) {
            codeMapNrs[i] = encoding.indexOf(codeMap.charAt(i));
        }
        return codeMapNrs;
    }

    @Override
    public boolean canHandleDataType(DataType dataType) {
        return dataType instanceof Aminoacid;
    }

/*********************************************************/

} 
