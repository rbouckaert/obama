package obama.substitutionmodel;

import beast.base.core.Description;
import beast.base.evolution.datatype.Aminoacid;
import beast.base.evolution.datatype.DataType;
import beast.base.evolution.substitutionmodel.EmpiricalSubstitutionModel;
/** model data from codonPHYML, which is based on PHYML **/

@Description("Blosum62 substitution model for amino acids")
public class OBAMA_Blosum62 extends EmpiricalSubstitutionModel {
    @Override
	public
    double[][] getEmpiricalRates() {
        double[][] rate = new double[20][20];

    
    /* 
     This model has been 'translated' from John Huelsenbeck and Fredrik Ronquist
     MrBayes program into PHYML format by Federico Abascal. Many thanks to them. 
     */
    
    /*
     Henikoff, S., and J. G. Henikoff. 1992. Amino acid substitution            
     matrices from protein blocks. Proc. Natl. Acad. Sci., U.S.A.            
     89:10915-10919.                                                         
     */
    
    
    rate[1][0]= 0.735790389698;  rate[2][0]= 0.485391055466;  rate[2][1]= 1.297446705134;  rate[3][0]= 0.543161820899;  
    rate[3][1]= 0.500964408555;  rate[3][2]= 3.180100048216;  rate[4][0]= 1.45999531047;   rate[4][1]= 0.227826574209;  
    rate[4][2]= 0.397358949897;  rate[4][3]= 0.240836614802;  rate[5][0]= 1.199705704602;  rate[5][1]= 3.020833610064;  
    rate[5][2]= 1.839216146992;  rate[5][3]= 1.190945703396;  rate[5][4]= 0.32980150463;   rate[6][0]= 1.1709490428;    
    rate[6][1]= 1.36057419042;   rate[6][2]= 1.24048850864;   rate[6][3]= 3.761625208368;  rate[6][4]= 0.140748891814;  
    rate[6][5]= 5.528919177928;  rate[7][0]= 1.95588357496;   rate[7][1]= 0.418763308518;  rate[7][2]= 1.355872344485;  
    rate[7][3]= 0.798473248968;  rate[7][4]= 0.418203192284;  rate[7][5]= 0.609846305383;  rate[7][6]= 0.423579992176;  
    rate[8][0]= 0.716241444998;  rate[8][1]= 1.456141166336;  rate[8][2]= 2.414501434208;  rate[8][3]= 0.778142664022;  
    rate[8][4]= 0.354058109831;  rate[8][5]= 2.43534113114;   rate[8][6]= 1.626891056982;  rate[8][7]= 0.539859124954;  
    rate[9][0]= 0.605899003687;  rate[9][1]= 0.232036445142;  rate[9][2]= 0.283017326278;  rate[9][3]= 0.418555732462;  
    rate[9][4]= 0.774894022794;  rate[9][5]= 0.236202451204;  rate[9][6]= 0.186848046932;  rate[9][7]= 0.189296292376;  
    rate[9][8]= 0.252718447885;  rate[10][0]= 0.800016530518; rate[10][1]= 0.622711669692; rate[10][2]= 0.211888159615; 
    rate[10][3]= 0.218131577594; rate[10][4]= 0.831842640142; rate[10][5]= 0.580737093181; rate[10][6]= 0.372625175087; 
    rate[10][7]= 0.217721159236; rate[10][8]= 0.348072209797; rate[10][9]= 3.890963773304; rate[11][0]= 1.295201266783; 
    rate[11][1]= 5.411115141489; rate[11][2]= 1.593137043457; rate[11][3]= 1.032447924952; rate[11][4]= 0.285078800906; 
    rate[11][5]= 3.945277674515; rate[11][6]= 2.802427151679; rate[11][7]= 0.752042440303; rate[11][8]= 1.022507035889; 
    rate[11][9]= 0.406193586642; rate[11][10]= 0.445570274261;rate[12][0]= 1.253758266664; rate[12][1]= 0.983692987457; 
    rate[12][2]= 0.648441278787; rate[12][3]= 0.222621897958; rate[12][4]= 0.76768882348;  rate[12][5]= 2.494896077113; 
    rate[12][6]= 0.55541539747;  rate[12][7]= 0.459436173579; rate[12][8]= 0.984311525359; rate[12][9]= 3.364797763104; 
    rate[12][10]= 6.030559379572;rate[12][11]= 1.073061184332;rate[13][0]= 0.492964679748; rate[13][1]= 0.371644693209; 
    rate[13][2]= 0.354861249223; rate[13][3]= 0.281730694207; rate[13][4]= 0.441337471187; rate[13][5]= 0.14435695975;  
    rate[13][6]= 0.291409084165; rate[13][7]= 0.368166464453; rate[13][8]= 0.714533703928; rate[13][9]= 1.517359325954; 
    rate[13][10]= 2.064839703237;rate[13][11]= 0.266924750511;rate[13][12]= 1.77385516883; rate[14][0]= 1.173275900924; 
    rate[14][1]= 0.448133661718; rate[14][2]= 0.494887043702; rate[14][3]= 0.730628272998; rate[14][4]= 0.356008498769; 
    rate[14][5]= 0.858570575674; rate[14][6]= 0.926563934846; rate[14][7]= 0.504086599527; rate[14][8]= 0.527007339151; 
    rate[14][9]= 0.388355409206; rate[14][10]= 0.374555687471;rate[14][11]= 1.047383450722;rate[14][12]= 0.454123625103;
    rate[14][13]= 0.233597909629;rate[15][0]= 4.325092687057; rate[15][1]= 1.12278310421;  rate[15][2]= 2.904101656456; 
    rate[15][3]= 1.582754142065; rate[15][4]= 1.197188415094; rate[15][5]= 1.934870924596; rate[15][6]= 1.769893238937; 
    rate[15][7]= 1.509326253224; rate[15][8]= 1.11702976291;  rate[15][9]= 0.35754441246;  rate[15][10]= 0.352969184527;
    rate[15][11]= 1.752165917819;rate[15][12]= 0.918723415746;rate[15][13]= 0.540027644824;rate[15][14]= 1.169129577716;
    rate[16][0]= 1.729178019485; rate[16][1]= 0.914665954563; rate[16][2]= 1.898173634533; rate[16][3]= 0.934187509431; 
    rate[16][4]= 1.119831358516; rate[16][5]= 1.277480294596; rate[16][6]= 1.071097236007; rate[16][7]= 0.641436011405; 
    rate[16][8]= 0.585407090225; rate[16][9]= 1.17909119726;  rate[16][10]= 0.915259857694;rate[16][11]= 1.303875200799;
    rate[16][12]= 1.488548053722;rate[16][13]= 0.488206118793;rate[16][14]= 1.005451683149;rate[16][15]= 5.15155629227; 
    rate[17][0]= 0.465839367725; rate[17][1]= 0.426382310122; rate[17][2]= 0.191482046247; rate[17][3]= 0.145345046279; 
    rate[17][4]= 0.527664418872; rate[17][5]= 0.758653808642; rate[17][6]= 0.407635648938; rate[17][7]= 0.508358924638; 
    rate[17][8]= 0.30124860078;  rate[17][9]= 0.34198578754;  rate[17][10]= 0.6914746346;  rate[17][11]= 0.332243040634;
    rate[17][12]= 0.888101098152;rate[17][13]= 2.074324893497;rate[17][14]= 0.252214830027;rate[17][15]= 0.387925622098;
    rate[17][16]= 0.513128126891;rate[18][0]= 0.718206697586; rate[18][1]= 0.720517441216; rate[18][2]= 0.538222519037; 
    rate[18][3]= 0.261422208965; rate[18][4]= 0.470237733696; rate[18][5]= 0.95898974285;  rate[18][6]= 0.596719300346; 
    rate[18][7]= 0.308055737035; rate[18][8]= 4.218953969389; rate[18][9]= 0.674617093228; rate[18][10]= 0.811245856323;
    rate[18][11]= 0.7179934869;  rate[18][12]= 0.951682162246;rate[18][13]= 6.747260430801;rate[18][14]= 0.369405319355;
    rate[18][15]= 0.796751520761;rate[18][16]= 0.801010243199;rate[18][17]= 4.054419006558;rate[19][0]= 2.187774522005; 
    rate[19][1]= 0.438388343772; rate[19][2]= 0.312858797993; rate[19][3]= 0.258129289418; rate[19][4]= 1.116352478606; 
    rate[19][5]= 0.530785790125; rate[19][6]= 0.524253846338; rate[19][7]= 0.25334079019;  rate[19][8]= 0.20155597175;  
    rate[19][9]= 8.311839405458; rate[19][10]= 2.231405688913;rate[19][11]= 0.498138475304;rate[19][12]= 2.575850755315;
    rate[19][13]= 0.838119610178;rate[19][14]= 0.496908410676;rate[19][15]= 0.561925457442;rate[19][16]= 2.253074051176;
    rate[19][17]= 0.266508731426;rate[19][18]= 1;             
    
       for (int i = 0; i < 20; i++) for (int j = i + 1; j < 20; j++) rate[i][j] = rate[j][i]; return rate;
    }

    @Override
    public double[] getEmpiricalFrequencies() {
        double[] f = new double[20];
    
    f[0]= 0.074;                 f[1]= 0.052;                 f[2]= 0.045;                 f[3]= 0.054;                 
    f[4]= 0.025;                 f[5]= 0.034;                 f[6]= 0.054;                 f[7]= 0.074;                 
    f[8]= 0.026;                 f[9]= 0.068;                 f[10]= 0.099;                f[11]= 0.058;                
    f[12]= 0.025;                f[13]= 0.047;                f[14]= 0.039;                f[15]= 0.057;                
    f[16]= 0.051;                f[17]= 0.013;                f[18]= 0.032;                f[19]= 0.073;                
    
        return f;
    }

    @Override
    public int[] getEncodingOrder() {
        Aminoacid dataType = new Aminoacid();
        String codeMap = dataType.getCodeMap();
        int[] codeMapNrs = new int[dataType.getStateCount()];
        String encoding = "ARNDCQEGHILKMFPSTWYV";
        for (int i = 0; i < dataType.getStateCount(); i++) {
            codeMapNrs[i] = encoding.indexOf(codeMap.charAt(i));
        }
        return codeMapNrs;
    }

    @Override
    public boolean canHandleDataType(DataType dataType) {
        return dataType instanceof Aminoacid;
    }

/*********************************************************/

} 
